// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Categories {
  id                 Int               @id @default(autoincrement())
  name               String               @db.Char(20)
  description        String               @db.Char(255)
  thumbnail          String?              @db.Char(255)
  create_at          DateTime?            @db.Timestamp(0)
  update_at          DateTime?            @db.Timestamp(0)
  product_categorie ProductCategories[]
}

model Companys {
  id           Int    @id(map: "id") @default(autoincrement())
  customer_id  Int
  rif_j        String    @db.Char(20)
  company_name String    @db.Char(40)
  email        String?   @db.Char(60)
  phone_code   String    @db.Char(8)
  phone        Int
  create_at    DateTime? @db.Timestamp(0)
  update_at    DateTime? @db.Timestamp(0)
  customer    Customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, map: "customer_id")
}

model Consumers {
  id              Int    @id(map: "consumer_pkey") @default(autoincrement())
  user_id         Int
  full_name       String    @db.Char(60)
  email           String    @db.Char(60)
  billing_address String?   @db.Char(255)
  document        String    @db.Char(60)
  phone_code      String    @db.Char(8)
  phone           Int
  birht_date      DateTime  @db.Date
  create_at       DateTime? @db.Timestamp(0)
  update_at       DateTime? @db.Timestamp(0)
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id")
  order          Orders[]
}

model Customers {
  id              Int     @id @default(autoincrement())
  user_id         Int
  email           String     @db.Char(60)
  billing_address String     @db.Char(255)
  rif_n           String     @db.Char(20)
  phone_code      String     @db.Char(8)
  phone           Int
  country         String     @db.Char(255)
  address         String     @db.Char(255)
  create_at       DateTime?  @db.Timestamp(0)
  update_at       DateTime?  @db.Timestamp(0)
  company        Companys[]
}

model Locals {
  id            Int    @id @default(autoincrement())
  company_id    Int
  local_name    String    @db.Char(255)
  name_location String    @db.Char(255)
  phone_code    String    @db.Char(8)
  phone         Int
  create_at     DateTime? @db.Timestamp(0)
  update_at     DateTime? @db.Timestamp(0)
}

model Options {
  id                 Int               @id @default(autoincrement())
  option_name        String               @db.Char(1)
  create_at          DateTime?            @db.Timestamp(0)
  update_at          DateTime?            @db.Timestamp(0)
  product_categories ProductCategories[]
  product_option    ProductOptions[]
}

model Orders {
  id               Int           @id @default(autoincrement())
  consumer_id      Int
  ammount          Int
  shipping_address String?          @db.Char(255)
  order_address    String?          @db.Char(255)
  order_email      String?          @db.Char(60)
  order_date       DateTime         @db.Date
  order_status     Int
  create_at        DateTime?        @db.Timestamp(0)
  update_at        DateTime?        @db.Timestamp(0)
  consumer        Consumers        @relation(fields: [consumer_id], references: [id], onDelete: Cascade, map: "consumer_id")
  order_detail   OrdersDetails[]
}

model OrdersDetails {
  id         Int    @id @default(autoincrement())
  order_id   Int
  product_id Int
  price      Int
  sku        String?   @db.Char(1)
  quantity   Int?
  create_at  DateTime? @db.Timestamp(0)
  update_at  DateTime? @db.Timestamp(0)
  order     Orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "order_id")
  product   Products  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "product_id")
}

model Permissions {
  id               Int    @id @default(autoincrement())
  role_id          Int
  permissions_name String    @db.Char(255)
  create_at        DateTime? @db.Timestamp(0)
  update_at        DateTime? @db.Timestamp(0)
  role            Roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model ProductCategories {
  id          Int     @id @default(autoincrement())
  option_id   Int
  category_id Int
  create_at   DateTime?  @db.Timestamp(0)
  update_at   DateTime?  @db.Timestamp(0)
  categorie  Categories @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "category_id")
  option     Options    @relation(fields: [option_id], references: [id], onDelete: Cascade, map: "option_id")
}

model ProductOptions {
  id         Int    @id @default(autoincrement())
  option_id  Int
  product_id Int
  create_at  DateTime? @db.Timestamp(0)
  update_at  DateTime? @db.Timestamp(0)
  option    Options   @relation(fields: [option_id], references: [id], onDelete: Cascade, map: "option_id")
  product   Products  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "product_id")
}

model Products {
  id              Int            @id @default(autoincrement())
  sku             String?           @db.Char(60)
  name            String            @db.Char(120)
  price           Int
  weight          Int?
  description     String            @db.Char(255)
  thumbnail       String            @db.Char(120)
  image           String?           @db.Char(120)
  category        String            @db.Char(120)
  stock           String?           @db.Char(1)
  create_at       DateTime?         @db.Timestamp(0)
  update_at       DateTime?         @db.Timestamp(0)
  orders_details  OrdersDetails[]
  product_option ProductOptions[]
}

model RoleUsers {
  id        Int    @id(map: "role_user_pkey") @default(autoincrement())
  user_id   Int
  role_id   Int
  create_at DateTime? @db.Timestamp(0)
  update_at DateTime? @db.Timestamp(0)
  role     Roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_id")
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id")
}

model Roles {
  id          Int        @id @default(autoincrement())
  role_name   String        @db.Char(255)
  create_at   DateTime?     @db.Timestamp(0)
  update_at   DateTime?     @db.Timestamp(0)
  permissions Permissions[]
  role_user  RoleUsers[]
}


model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String
  consumer         Consumers[]
  role_user        RoleUsers[]
  // author    User    @relation(fields: [authorId], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model users {
//   id                Int       @id @default(autoincrement())
//   email             String       @unique(map: "email") @db.VarChar(60)
//   name              String       @db.VarChar(60)
//   password          String       @db.VarChar(255)
//   email_verified_at DateTime?    @db.Timestamptz(6)
//   remember_token    String?       @db.VarChar(255)
//   social_token      String?      @db.VarChar(60)
//   consumers         consumers[]
//   role_users        role_users[]
// }